%% -*- mode: erlang -*-
%% Copyright (c) 2008-2015 Robert Virding
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

%% We define the syntax as an LL(1) and write/generate a parser for
%% it. We also define the grammar with the same form as for yecc even
%% though we have no automatic generator.

Terminals
    symbol number string fun '(' ')' '[' ']' '.' '\'' ',' ',@' '`' '#('
    '#B(' '#M(' '#\''.

Nonterminals form sexpr list list_tail proper_list .

Rootsymbol form.

form -> sexpr : '$1'.                                   % 0
sexpr -> symbol : value('$1').                          % 1
sexpr -> number : value('$1').                          % 2
sexpr -> string : value('$1').                          % 3
sexpr -> '#\'' : make_fun(value('$1')).                 % 4
sexpr -> '\'' sexpr : [quote,'$2'].                     % 5
sexpr -> '`' sexpr : [backquote,'$2'].                  % 6
sexpr -> ',' sexpr : [comma,'$2'].                      % 7
sexpr -> ',@' sexpr : ['comma-at','$2'].                % 8
sexpr -> '(' list ')' : '$2'.                           % 9
sexpr -> '[' list ']' : '$2'.                           %10
sexpr -> '#(' proper_list ')' : list_to_tuple('$2').    %11
sexpr -> '#B(' proper_list ')' :                        %12
        make_bin(line('$1'), '$2').
sexpr -> '#M(' proper_list ')' :                        %13
        make_map(line('$1'), '$2').
list -> sexpr list_tail : ['$1'|'$2'].                  %14
list -> '$empty' : [].                                  %15
list_tail -> sexpr list_tail : ['$1'|'$2'].             %16
list_tail -> '.' sexpr : '$2'.                          %17
list_tail -> '$empty' : [].                             %18
proper_list -> sexpr proper_list : ['$1'|'$2'].         %19
proper_list -> '$empty' : [].                           %20

%% The computed First and Follow sets for the productions. This is the
%% only really tricky bit.
%%
%% First(f) = {symbol number string #' ( [ ' ` , ,@ #( #B( #M(}
%% First(s) = {symbol number string #' ( [ ' ` , ,@ #( #B( #M(}
%% First(l) = {symbol number string #' ( [ ' ` , ,@ #( #B( #M( empty}
%% First(t) = {symbol number string #' ( [ . ' ` , ,@ #( #B( #M( empty}
%% First(p) = {symbol number string #' ( [ ' ` , ,@ #( #B( #M( empty}
%% Follow(f) = empty
%% Follow(s) = {symbol number string #' ( [ ) ] ' ` , ,@ #( #B( #M(}
%% Follow(l) = { ) ] }
%% Follow(t) = { ) ] }
%% Follow(p) = { ) }

%% The table (tedious).
%% Top  symbol      (         )       [       ]       .       '`,,@   #(#B(#M(
%%  f   f->s      f->s              f->s                      f->s    f->s
%%  s   s->sym    s->( l )          s->[ s ]                  s->' s  s->( p )
%%  l   l->s t    l->s t     l->e   l->s t   l->e             l->s t  l->s t
%%  t   t->s t    t->s t     t->e   t->s t   t->e   t->. s    t->s t  t->s t
%%  p   p->s p    p->s p     p->e   p->s p   p->e             p->s p  p->s p

Erlang code.

%% For backwards compatibility
-export([sexpr/1,sexpr/2]).

sexpr(Ts) -> form(Ts).
sexpr(Cont, Ts) -> form(Cont, Ts).

%% make_fun(String) -> FunList.
%%  Convert a fun string to a fun sexpr.
%%    "F/A" -> ['fun', F, A].
%%    "M:F/A" -> ['fun', M, F, A].

make_fun("=:=/2") ->
    ['fun', '=:=', 2];
make_fun(FunStr) ->
    J = string:rchr(FunStr, $/),
    A = list_to_integer(string:substr(FunStr, J + 1)),
    case string:chr(FunStr, $:) of
        0 ->
            F = list_to_atom(string:substr(FunStr, 1, J - 1)),
            ['fun', F, A];
        I ->
            F = list_to_atom(string:substr(FunStr, I + 1, J - I - 1)),
            M = list_to_atom(string:substr(FunStr, 1, I - 1)),
            ['fun', M, F, A]
    end.

%% make_bin(Line, Segments) -> Binary.
%%  Make a binary from the segments.

make_bin(Line, Segs) ->
    case catch lfe_eval:expr([binary|Segs]) of
	Bin when is_bitstring(Bin) -> Bin;
	_ -> return_error(Line, "bad binary")
    end.

%% make_map(Line, Elements) -> Map.
%%  Make a map from the key/value elements.

make_map(Line, Es) ->
    case catch maps:from_list(pair_list(Es)) of
	Map when is_map(Map) -> Map;
	_ -> return_error(Line, "bad map")
    end.

%% pair_list(List) -> [{A,B}].
%%  Generate a list of tuple pairs from the elements. An error if odd
%%  number of elements in list.

pair_list([A,B|L]) -> [{A,B}|pair_list(L)];
pair_list([]) -> [].
